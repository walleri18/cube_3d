#pragma once

/*
	Структуры и перечисления
*/
// Структура описывающие отрезки
struct LineSegment
{
	// Первая точка
	int x_one;
	int y_one;

	// Вторая точка
	int x_two;
	int y_two;
};

// Перечисление с доступными типами команд
enum MessageID
{
	ESC, // Закончить программу
	LEFT, // Сдвинуть куб влево
	RIGHT, // Сдвинуть куб вправо
	UP, // Сдвинуть куб вверх
	DOWN, // Сдвинуть куб вниз
	ROTX, // Повернуть куб вокруг оси X
	ROTY, // Повернуть куб вокруг оси Y
	ROTZ, // Повернуть куб вокруг оси Z
	PLUS, // Увеличить масштаб
	MINUS, // Уменьшить масштаб
	ROTX_INF, // Бесконечное кручение куба вокруг оси X
	ROTY_INF, // Бесконечное кручение куба вокруг оси Y
	ROTZ_INF, // Бесконечное кручение куба вокруг оси Z
	LEFT_INF,
	RIGHT_INF,
	UP_INF,
	DOWN_INF,
	PLUS_INF,
	MINUS_INF
};

/*
	Класс для обработки математических расчётов отображения куба
*/
class Core
{
// Данные
private:
	// Количество вершин куба
	const static int size = 8;

	// Исходные координаты куба
	const int pix[size][3] = { { -25, -25, -25 },{ 25, -25, -25 },{ 25, 25, -25 },{ -25, 25, -25 },
	{ -25, -25, 25 },{ 25, -25, 25 },{ 25, 25, 25 },{ -25, 25, 25 } };

	// Преобразованные координаты куба
	int newpix[size][3];

	/*
		sX, sY - спроецированные координаты
		X, Y, Z - длина сторон спроецированных на координатные линии
	*/
	int X, Y, Z, sX, sY;

	// Углы поворота по X,Y,Z в градусах
	int RotX, RotY, RotZ;

	// сдвиг начала координат
	int ShiftX, ShiftY;

	// масштабирование
	double Scale;

	// Массив отрезков. 12 - это количество рёбер у куба. Если легче, то столько раз вызывается функция line
	LineSegment lineSegment[12];

	// Высота матрицы отображения height
	const int height;

	// Ширина матрицы отображения width
	const int width;

	// Матрица отображения
	bool **matrix;

// Функциональность
public:
	// Конструктор по-умолчанию
	Core();

	// Геттеры размеров матрицы
	int getWidth() const;
	int getHeight() const;

	// Геттер матрицы отображения
	bool **getMatrix() const;

	// Математическое округление
	static int ceil(double);

	// Математический модуль
	static int abs(double);

	// Поиск размера строки
	static int len(char*);

	// Сравнение строк
	static bool comparison(char*, char *);

	// Отрисовка кубика
	void DrawPix();

	// Функция для сдвига влево
	void LEFT();

	// Функция для сдвига вправо
	void RIGHT();

	// Функция для сдвига вверх
	void UP();

	// Функция для сдвига вниз
	void DOWN();

	// Функция для поворота по оси X
	void ROTX();

	// Функция для поворота по оси Y
	void ROTY();

	// Функция для поворота по оси Z
	void ROTZ();

	// Функция для увеличения масштаба
	void PLUS();

	// Функция для уменьшения масштаба
	void MINUS();

private:
	// Очистка матрицы отображения
	void clearMatrix();

	/*
	Вычисление фронтальной геометрической (изометрической) проекции
	трехмерных точек на двумерную плоскость
	*/
	void Perspect();

	/*
	Использование аналитической геометрии. Хоть где-то она пригодилась)
	*/
	// 3-D преобразования в 2D
	void Compute();

	/*
	Это маленький костыль, но зато пришлось меньше мучаться.
	Объясню на защите)
	*/
	// Функция для приведения "здоровых размеров" куба к размеру нашего экрана
	void bringingScreenSize();

	// Отрисовка линии в матрице
	void line(int, int, int, int);
};