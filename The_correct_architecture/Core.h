#pragma once
#define _USE_MATH_DEFINES
// Математическое округление
// Просто было лень искать где-то чужое
#define CEIL(X) ((int)(X + 0.5))

// Прототип функции поиска размера строки
size_t strlen(char*);

// Прототип нахождение модуля числа
int abs(int);
long abs(long);
long long abs(long long);
double abs(double);
long double abs(long double);
float abs(float);

// Перечисление с доступными типами команд
enum MessageID
{
	ESC, // Закончить программу
	LEFT, // Сдвинуть куб влево
	RIGHT, // Сдвинуть куб вправо
	UP, // Сдвинуть куб вверх
	DOWN, // Сдвинуть куб вниз
	ROTX, // Повернуть куб вокруг оси X
	ROTY, // Повернуть куб вокруг оси Y
	ROTZ, // Повернуть куб вокруг оси Z
	PLUS, // Увеличить масштаб
	MINUS, // Уменьшить масштаб
	ROTX_INF, // Бесконечное кручение куба вокруг оси X
	ROTY_INF, // Бесконечное кручение куба вокруг оси Y
	ROTZ_INF, // Бесконечное кручение куба вокруг оси Z
	LEFT_INF, 
	RIGHT_INF,
	UP_INF,
	DOWN_INF,
	PLUS_INF,
	MINUS_INF
};

// Пространство имён с главными глобальными "объектами"
namespace Turov_Vitaly 
{
	// width - столбцы, ширина
	// height - строки, высота
	const int width = 16;
	const int height = 16;

	// Матрица отображения
	bool matrix[height][width];

	// Количество вершин куба
	const int size = 8;

	// Исходные координаты куба
	const int pix[size][3] = { { -25, -25, -25 },{ 25, -25, -25 },{ 25, 25, -25 },{ -25, 25, -25 },
	{ -25, -25, 25 },{ 25, -25, 25 },{ 25, 25, 25 },{ -25, 25, 25 } };

	// Преобразованные координаты куба
	int newpix[size][3];

	/*
		sX, sY - спроецированные координаты
		X, Y, Z - длина сторон спроецированных на координатные линии
	*/
	int X, Y, Z, sX, sY;

	// Углы поворота по X,Y,Z в градусах
	int RotX = 0, RotY = 0, RotZ = 0;

	// сдвиг начала координат
	int ShiftX = 325, ShiftY = 225;

	// масштабирование
	double Scale = 8;

	// Структура описывающие отрезки
	struct LineSegment
	{
		// Первая точка
		int x_one;
		int y_one;

		// Вторая точка
		int x_two;
		int y_two;
	};

	// Массив отрезков. 12 - это количество рёбер у куба. Если легче, то столько раз вызывается функция line
	LineSegment lineSegment[12];
}

// Глобальное пространство имён со всеми функциями построения
namespace GLOBAL 
{
	// Сравнение слов (так как не корректно работает strcmp)
	bool comparison(char*, char *);

	// Очистка матрицы отображения
	void clearMatrix();

	// Отрисовка линии в матрице
	void line(int, int, int, int);

	/*
		Вычисление фронтальной геометрической (изометрической) проекции
		трехмерных точек на двумерную плоскость
	*/
	void Perspect();

	/*
		Использование аналитической геометрии. Хоть где-то она пригодилась)
	*/
	// 3-D преобразования в 2D
	void Compute();

	/*
		Это маленький костыль, но зато пришлось меньше мучаться.
		Объясню на защите)
	*/
	// Функция для приведения "здоровых размеров" куба к размеру нашего экрана
	void bringingScreenSize();

	/*
		Наша главная функция в которой происходить ("магия") рисование
	*/
	// Рисование кубика
	void DrawPix();
}

/*
	Это наш интерфейс, который мы предоставляем для дальнейшего отображения кубика 
*/
// Пространство имён с командами
namespace Commandos 
{
	// Функция для сдвига влево
	void LEFT();

	// Функция для сдвига вправо
	void RIGHT();

	// Функция для сдвига вверх
	void UP();

	// Функция для сдвига вниз
	void DOWN();

	// Функция для поворота по оси X
	void ROTX();

	// Функция для поворота по оси Y
	void ROTY();

	// Функция для поворота по оси Z
	void ROTZ();

	// Функция для увеличения масштаба
	void PLUS();

	// Функция для уменьшения масштаба
	void MINUS();

	// Функция бесконечного вращения по X
	void ROTX_INF();

	// Функция бесконечного вращения по Y
	void ROTY_INF();

	// Функция бесконечного вращения по Z
	void ROTZ_INF();

	// Функция бесконечного смещения влево
	void LEFT_INF();

	// Функция бесконечного смещения вправо
	void RIGHT_INF();

	// Функция бесконечного смещения вверх
	void UP_INF();

	// Функция бесконечного смещения вниз
	void DOWN_INF();

	// Функция бесконечного уменьшения масштаба
	void MINUS_INF();

	// Функция бесконечного увеличения масштаба
	void PLUS_INF();
}